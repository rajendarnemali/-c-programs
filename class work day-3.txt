11.	Given an array of integers, find the smallest missing positive integer.
program:
#include <stdio.h>

int findMissingPositive(int arr[], int n) {
    int i;
    for (i = 0; i < n; i++) {
        while (arr[i] > 0 && arr[i] <= n && arr[arr[i] - 1] != arr[i]) {
            int temp = arr[arr[i] - 1];
            arr[arr[i] - 1] = arr[i];
            arr[i] = temp;
        }
    }
    for (i = 0; i < n; i++) {
        if (arr[i] != i + 1) {
            return i + 1;
        }
    }
    return n + 1;
}

int main() {
    int arr[] = {3, 4, -1, 1};
    int n = sizeof(arr) / sizeof(arr[0]);
    int missing = findMissingPositive(arr, n);
    printf("The smallest missing positive integer is: %d\n", missing);
    return 0;
}
12.	Given an array of integers, find the two elements that have the maximum product.
program:
include <stdio.h>

void findMaxProduct(int arr[], int n) {
    if (n < 2) {
        printf("Array should have at least two elements\n");
        return;
    }

   
    int max1 = arr[0], max2 = arr[1];

    
    for (int i = 2; i < n; i++) {
        if (arr[i] > max1) {
            max2 = max1;
            max1 = arr[i];
        } else if (arr[i] > max2) {
            max2 = arr[i];
        }
    }

    printf("Two elements with maximum product are: %d and %d\n", max1, max2);
    printf("Maximum product is: %d\n", max1 * max2);
}

int main() {
    int arr[] = {1, 4, 3, 6, 7, 0};
    int n = sizeof(arr) / sizeof(arr[0]);

    findMaxProduct(arr, n);

    return 0;
}
13.	Given an array of integers, find the subarray with the maximum product.
program:
#include <stdio.h>

int max(int a, int b) {
    return a > b ? a : b;
}

int min(int a, int b) {
    return a < b ? a : b;
}

int maxProductSubarray(int arr[], int n) {
    if (n == 0) return 0;

    int maxEndingHere = arr[0];
    int minEndingHere = arr[0];
    int maxSoFar = arr[0];

    for (int i = 1; i < n; i++) {
        int temp = maxEndingHere;
        maxEndingHere = max(arr[i], max(arr[i] * maxEndingHere, arr[i] * minEndingHere));
        minEndingHere = min(arr[i], min(arr[i] * temp, arr[i] * minEndingHere));
        maxSoFar = max(maxSoFar, maxEndingHere);
    }

    return maxSoFar;
}

int main() {
    int arr[] = {2, 3, -2, 4};
    int n = sizeof(arr) / sizeof(arr[0]);

    int maxProd = maxProductSubarray(arr, n);
    printf("Maximum product of a subarray is: %d\n", maxProd);

    return 0;
}
14.	Given an array of integers, find the longest subarray with the given sum.
program:
#include <stdio.h>

void longestSubarrayWithSum(int arr[], int n, int targetSum) {
    int maxLength = 0; 
    int startIndex = -1; 
    int currentSum = 0; 
    int start = 0; 

    for (int i = 0; i < n; i++) {
        currentSum += arr[i];

        
        while (currentSum > targetSum && start <= i) {
            currentSum -= arr[start];
            start++;
        }

    
        if (currentSum == targetSum && i - start + 1 > maxLength) {
            maxLength = i - start + 1;
            startIndex = start;
        }
    }

    if (maxLength > 0) {
        printf("Longest subarray with sum %d is: ", targetSum);
        for (int i = startIndex; i < startIndex + maxLength; i++) {
            printf("%d ", arr[i]);
        }
        printf("\n");
    } else {
        printf("No subarray found with sum %d\n", targetSum);
    }
}

int main() {
    int arr[] = {5, 6, -5, 5, 3, 5, 3, -2, 0};
    int n = sizeof(arr) / sizeof(arr[0]);
    int targetSum = 8;

    longestSubarrayWithSum(arr, n, targetSum);

    return 0;
}
15.	Given a matrix (2D array) of integers, find the saddle point(s) (an element that is the minimum in its row and maximum in its column).
program:
#include <stdio.h>

#define ROW 3
#define COL 3

void findSaddlePoints(int matrix[][COL]) {
    int i, j;
    int saddlePointFound = 0;

    printf("Saddle points in the matrix:\n");

    for (i = 0; i < ROW; i++) {
        int minRowValue = matrix[i][0];
        int minColIndex = 0;

        
        for (j = 1; j < COL; j++) {
            if (matrix[i][j] < minRowValue) {
                minRowValue = matrix[i][j];
                minColIndex = j;
            }
        }

        
        int k;
        for (k = 0; k < ROW; k++) {
            if (matrix[k][minColIndex] > minRowValue) {
                break;
            }
        }

        
        if (k == ROW) {
            printf("Saddle point found at (%d, %d): %d\n", i, minColIndex, minRowValue);
            saddlePointFound = 1;
        }
    }

    if (!saddlePointFound) {
        printf("No saddle points found in the matrix\n");
    }
}

int main() {
    int matrix[ROW][COL] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };

    findSaddlePoints(matrix);

    return 0;
}
